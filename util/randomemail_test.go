// ********RoostGPT********
/*
Test generated by RoostGPT for test single-go-testfile using AI Type Open AI and AI Model gpt-4o-2024-08-06

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Here are several test scenarios for the `RandomEmail` function, which generates a random email address using a random string of a specified length:

### Scenario 1: Generate Email with Standard Length

**Details:**
- **Description:** This test checks if the `RandomEmail` function correctly generates an email address with a random string of a specified standard length.
- **Execution:**
  - **Arrange:** Set up a standard length for the random string, e.g., 10 characters.
  - **Act:** Invoke `RandomEmail` with the specified length.
  - **Assert:** Verify that the returned email address contains a random string of the expected length followed by "@email.com".
- **Validation:**
  - The assertion is based on checking the length of the random string part of the email address.
  - This test is important to ensure that the function behaves as expected for typical use cases.

### Scenario 2: Generate Email with Minimum Length

**Details:**
- **Description:** This test checks if the function can handle generating an email with the minimum possible length for the random string.
- **Execution:**
  - **Arrange:** Set the random string length to 1.
  - **Act:** Call `RandomEmail` with length 1.
  - **Assert:** Confirm the email address is of the format "x@email.com", where "x" is a single character.
- **Validation:**
  - The assertion ensures that the function can handle the smallest non-zero input, which is crucial for validating edge cases.

### Scenario 3: Generate Email with Zero Length

**Details:**
- **Description:** This test checks the function's behavior when the input length for the random string is zero.
- **Execution:**
  - **Arrange:** Set the random string length to 0.
  - **Act:** Call `RandomEmail` with length 0.
  - **Assert:** Verify that the email returned is "@email.com".
- **Validation:**
  - This test ensures that the function can handle edge cases where the input length is zero, which might be unexpected behavior.

### Scenario 4: Generate Email with Maximum Length

**Details:**
- **Description:** This test checks the function's ability to handle a very large length for the random string.
- **Execution:**
  - **Arrange:** Set a very large length, e.g., 1000 characters.
  - **Act:** Invoke `RandomEmail` with the large length.
  - **Assert:** Ensure the length of the random string in the email address matches the specified length.
- **Validation:**
  - This test validates the function's performance and correctness with large inputs, which is important for robustness.

### Scenario 5: Validate Email Format

**Details:**
- **Description:** This test checks if the generated email has the correct format, regardless of the random string length.
- **Execution:**
  - **Arrange:** Choose any valid length, e.g., 5.
  - **Act:** Call `RandomEmail` with the chosen length.
  - **Assert:** Check that the email contains exactly one "@" symbol and ends with "@email.com".
- **Validation:**
  - Ensures that the email formatting is consistent and meets basic email format expectations, which is essential for functionality.

### Scenario 6: Consistency Across Multiple Calls

**Details:**
- **Description:** This test checks the randomness of the generated email addresses by ensuring different calls produce different results.
- **Execution:**
  - **Arrange:** Choose a length, e.g., 8.
  - **Act:** Call `RandomEmail` multiple times with the same length.
  - **Assert:** Verify that at least two generated email addresses differ.
- **Validation:**
  - Important to ensure that the function provides randomness, which is a critical feature of the function's purpose.

These scenarios cover a range of potential inputs and conditions, testing both the normal operation and edge cases for the `RandomEmail` function.
*/

// ********RoostGPT********
package util

import (
	"strings"
	"testing"
)

// Ensure the RandomEmail function is imported from the util package

func TestRandomEmail(t *testing.T) {
	type testCase struct {
		name           string
		input          int
		expectedFormat string
		expectedLength int
	}

	testCases := []testCase{
		{
			name:           "Generate Email with Standard Length",
			input:          10,
			expectedFormat: "@email.com",
			expectedLength: 10,
		},
		{
			name:           "Generate Email with Minimum Length",
			input:          1,
			expectedFormat: "@email.com",
			expectedLength: 1,
		},
		{
			name:           "Generate Email with Zero Length",
			input:          0,
			expectedFormat: "@email.com",
			expectedLength: 0,
		},
		{
			name:           "Generate Email with Maximum Length",
			input:          1000,
			expectedFormat: "@email.com",
			expectedLength: 1000,
		},
		{
			name:           "Validate Email Format",
			input:          5,
			expectedFormat: "@email.com",
			expectedLength: 5,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			email := RandomEmail(tc.input)
			if !strings.HasSuffix(email, tc.expectedFormat) {
				t.Errorf("Failed %s: expected email to end with %s, got %s", tc.name, tc.expectedFormat, email)
			}

			randomPart := strings.TrimSuffix(email, tc.expectedFormat)
			if len(randomPart) != tc.expectedLength {
				t.Errorf("Failed %s: expected random part length to be %d, got %d", tc.name, tc.expectedLength, len(randomPart))
			}

			// Specific format validation
			if !strings.Contains(email, "@") || strings.Count(email, "@") != 1 {
				t.Errorf("Failed %s: email does not contain exactly one @ symbol", tc.name)
			}

			t.Logf("Success %s: email format and length are as expected", tc.name)
		})
	}

	// Test for randomness
	t.Run("Consistency Across Multiple Calls", func(t *testing.T) {
		email1 := RandomEmail(8)
		email2 := RandomEmail(8)

		if email1 == email2 {
			t.Errorf("Failed Consistency Across Multiple Calls: expected different email addresses, got %s and %s", email1, email2)
		} else {
			t.Log("Success Consistency Across Multiple Calls: different email addresses generated")
		}
	})
}
