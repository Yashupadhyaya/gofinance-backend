// ********RoostGPT********
/*
Test generated by RoostGPT for test single-go-testfile using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Valid Input with Single Character Length
Details:
    Description: This test is meant to check if the function can correctly generate a random email with a single character before the @ symbol.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 1.
    Assert: Use Go testing facilities to verify that the returned string is of length 11 (1 character for the random string, 10 characters for "@email.com").
Validation:
    The choice of assertion is based on the logic that the length of the returned string should be equal to the length of the static string "@email.com" plus the length of the random string. This test is important to ensure that the function can handle minimum valid input.

Scenario 2: Valid Input with Multiple Characters Length
Details:
    Description: This test is meant to check if the function can correctly generate a random email with multiple characters before the @ symbol.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 5.
    Assert: Use Go testing facilities to verify that the returned string is of length 15 (5 characters for the random string, 10 characters for "@email.com").
Validation:
    The choice of assertion is based on the logic that the length of the returned string should be equal to the length of the static string "@email.com" plus the length of the random string. This test is important to check the behavior of the function with typical input.

Scenario 3: Zero Character Length
Details:
    Description: This test is meant to check if the function can handle an edge case where the length of the random string is 0.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 0.
    Assert: Use Go testing facilities to verify that the returned string is "@email.com".
Validation:
    The choice of assertion is based on the logic that if the length of the random string is 0, the returned string should only contain the static string "@email.com". This test is important to check the behavior of the function with edge case input.

Scenario 4: Negative Character Length
Details:
    Description: This test is meant to check if the function can handle an edge case where the length of the random string is negative.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with a negative number.
    Assert: Use Go testing facilities to verify that the returned string is "@email.com".
Validation:
    The choice of assertion is based on the logic that if the length of the random string is negative, the function should treat it as 0 and the returned string should only contain the static string "@email.com". This test is important to check the behavior of the function with invalid input.
*/

// ********RoostGPT********
package util

import (
	"math/rand"
	"strings"
	"testing"
	"time"
)

func Testrandomemail(t *testing.T) {
	rand.Seed(time.Now().UnixNano()) // Ensure random behavior

	// Define test cases
	testCases := []struct {
		name        string
		input       int
		expectError bool
	}{
		{"Valid Input with Single Character Length", 1, false},
		{"Valid Input with Multiple Characters Length", 5, false},
		{"Zero Character Length", 0, false},
		{"Negative Character Length", -5, false},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			t.Log("Scenario:", tc.name)

			result := RandomEmail(tc.input)

			if tc.input < 0 {
				tc.input = 0 // Treat negative input as 0
			}

			expectedLength := 10 + tc.input // "@email.com" + length of random string

			if len(result) != expectedLength {
				t.Errorf("Expected email of length %d, but got %d", expectedLength, len(result))
			} else {
				t.Logf("Success: Length of email is as expected: %d", len(result))
			}

			// Check if email contains "@email.com"
			if !strings.Contains(result, "@email.com") {
				t.Errorf("Expected email to contain '@email.com', but it did not: %s", result)
			} else {
				t.Logf("Success: Email contains '@email.com'")
			}
		})
	}
}
