// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-tes-file using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Valid Input with Single Character Length
Details:
    Description: This test is meant to check if the function can correctly generate a random email with a single character before the @ symbol.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 1.
    Assert: Use Go testing facilities to verify that the returned string is of length 11 (1 character for the random string, 10 characters for "@email.com").
Validation:
    The choice of assertion is based on the logic that the length of the returned string should be equal to the length of the static string "@email.com" plus the length of the random string. This test is important to ensure that the function can handle minimum valid input.

Scenario 2: Valid Input with Multiple Characters Length
Details:
    Description: This test is meant to check if the function can correctly generate a random email with multiple characters before the @ symbol.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 5.
    Assert: Use Go testing facilities to verify that the returned string is of length 15 (5 characters for the random string, 10 characters for "@email.com").
Validation:
    The choice of assertion is based on the logic that the length of the returned string should be equal to the length of the static string "@email.com" plus the length of the random string. This test is important to check the behavior of the function with typical input.

Scenario 3: Zero Character Length
Details:
    Description: This test is meant to check if the function can handle an edge case where the length of the random string is 0.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with the parameter 0.
    Assert: Use Go testing facilities to verify that the returned string is "@email.com".
Validation:
    The choice of assertion is based on the logic that if the length of the random string is 0, the returned string should only contain the static string "@email.com". This test is important to check the behavior of the function with edge case input.

Scenario 4: Negative Character Length
Details:
    Description: This test is meant to check if the function can handle an edge case where the length of the random string is negative.
Execution:
    Arrange: No required data setup as the function generates its own data.
    Act: Invoke the RandomEmail function with a negative number.
    Assert: Use Go testing facilities to verify that the returned string is "@email.com".
Validation:
    The choice of assertion is based on the logic that if the length of the random string is negative, the function should treat it as 0 and the returned string should only contain the static string "@email.com". This test is important to check the behavior of the function with invalid input.
*/

// ********RoostGPT********
package util

import (
	"testing"
)

// Testrandomemail tests the RandomEmail function
func Testrandomemail(t *testing.T) {
	// define the test cases
	testCases := []struct {
		name   string
		length int
		want   int
	}{
		{
			name:   "Valid Input with Single Character Length",
			length: 1,
			want:   11,
		},
		{
			name:   "Valid Input with Multiple Characters Length",
			length: 5,
			want:   15,
		},
		{
			name:   "Zero Character Length",
			length: 0,
			want:   10,
		},
		{
			name:   "Negative Character Length",
			length: -1,
			want:   10,
		},
	}

	// run the test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := RandomEmail(tc.length)
			if len(got) != tc.want {
				t.Errorf("RandomEmail(%v) = %v; want %v", tc.length, len(got), tc.want)
			}
			t.Logf("RandomEmail(%v) = %v; want %v", tc.length, len(got), tc.want)
		})
	}
}
