// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-tes-file using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=RandomString_d7e3599ac4
ROOST_METHOD_SIG_HASH=RandomString_c6fe4ad19a

Scenario 1: Valid Number for Random String

Details:
    Description: This test is meant to check if the function can generate a random string of a specific length when a valid number is given.
Execution:
    Arrange: No special setup is required.
    Act: Invoke the RandomString function with a positive integer.
    Assert: Use Go's len function to verify that the generated string's length matches the input number.
Validation:
    The assertion choice checks if the function correctly generates a random string of the specified length. This test is important as it verifies the function's primary functionality.

Scenario 2: Zero as Number for Random String

Details:
    Description: This test is meant to check the function's response when asked to generate a string of length zero.
Execution:
    Arrange: No special setup is required.
    Act: Invoke the RandomString function with zero.
    Assert: Use Go's len function to verify that the generated string's length is zero.
Validation:
    The assertion choice checks if the function correctly handles the edge case of zero length. This test is important as it verifies the function's behavior on edge cases.

Scenario 3: Negative Number for Random String

Details:
    Description: This test is meant to check the function's response when a negative number is provided.
Execution:
    Arrange: No special setup is required.
    Act: Invoke the RandomString function with a negative number.
    Assert: Use Go's len function to verify that the generated string's length is zero.
Validation:
    The assertion choice checks if the function correctly handles negative input, which should ideally not occur. This test is important as it verifies the function's error handling capabilities.

Scenario 4: Randomness of Generated Strings

Details:
    Description: This test is meant to verify the randomness of the strings generated by the function.
Execution:
    Arrange: No special setup is required.
    Act: Invoke the RandomString function twice with the same number.
    Assert: Use Go's equality operator to verify that the two generated strings are not identical.
Validation:
    The assertion choice checks if the function correctly generates different strings each time, demonstrating randomness. This test is important as it verifies the function's ability to generate random strings as expected.
*/

// ********RoostGPT********
package util

import (
	"testing"
)

func TestRandomString(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name          string
		input         int
		expectedLen   int
		shouldBeEqual bool
	}{
		{
			name:        "Valid Number",
			input:       5,
			expectedLen: 5,
		},
		{
			name:        "Zero as Number",
			input:       0,
			expectedLen: 0,
		},
		{
			name:        "Negative Number",
			input:       -5,
			expectedLen: 0,
		},
		{
			name:          "Randomness of Generated Strings",
			input:         5,
			expectedLen:   5,
			shouldBeEqual: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Act
			result := RandomString(tc.input)
			result2 := RandomString(tc.input)

			// Assert
			if len(result) != tc.expectedLen {
				t.Errorf("Expected length %v, but got %v", tc.expectedLen, len(result))
			}

			if tc.shouldBeEqual && result == result2 {
				t.Errorf("Expected different strings, but got the same")
			}
		})
	}
}
