// ********RoostGPT********
/*
Test generated by RoostGPT for test go-single-tes-file using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=RandomEmail_1905439733
ROOST_METHOD_SIG_HASH=RandomEmail_7a04f189fd

Scenario 1: Valid Number Input

Details:
  Description: This test is meant to check the functionality of the RandomEmail function when a valid integer is passed as an argument. The target scenario is the normal operation of the function.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the RandomEmail function with a positive integer (e.g., 5).
  Assert: Use Go testing facilities to verify that the returned string contains the '@email.com' suffix and the prefix is 5 characters long.
Validation:
  The choice of assertion is based on the function's expected behavior: it should generate a string of a certain length (defined by the input number) followed by '@email.com'. This test is important to ensure the function works as expected under normal conditions.

Scenario 2: Zero Input

Details:
  Description: This test is designed to check how the function handles zero as an input. The target scenario is edge case handling.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the RandomEmail function with 0 as the argument.
  Assert: Use Go testing facilities to verify that the returned string is exactly '@email.com'.
Validation:
  The assertion checks that the function correctly handles edge case inputs. If the function is asked to generate a random string of length 0, it should return only the '@email.com' part. This is essential to ensure the function handles edge cases properly.

Scenario 3: Negative Number Input

Details:
  Description: This test checks the function's behavior when a negative number is passed as an argument. The target scenario is error handling.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the RandomEmail function with a negative number (e.g., -5).
  Assert: Use Go testing facilities to verify that the returned string is '@email.com'.
Validation:
  The assertion checks that the function correctly handles error inputs. According to the function definition, it should generate a random string of length defined by the input number. However, it's not possible to generate a string of negative length, so the function should return only the '@email.com' part. This test is important to ensure that the function can handle erroneous inputs gracefully.
*/

// ********RoostGPT********
package util

import (
	"fmt"
	"strings"
	"testing"
)

func Testrandomemail(t *testing.T) {
	// Setup random seed
	rand.Seed(time.Now().UnixNano())

	// Define test cases
	testCases := []struct {
		name     string
		input    int
		expected string
	}{
		{
			name:     "Valid Number Input",
			input:    5,
			expected: "@email.com",
		},
		{
			name:     "Zero Input",
			input:    0,
			expected: "@email.com",
		},
		{
			name:     "Negative Number Input",
			input:    -5,
			expected: "@email.com",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Act
			result := RandomEmail(tc.input)

			// Assert
			if !strings.Contains(result, tc.expected) {
				t.Errorf("expected %s to contain %s", result, tc.expected)
			}

			// Check if length of prefix is correct
			if tc.input > 0 && len(result) != tc.input+len(tc.expected) {
				t.Errorf("expected length of prefix to be %d, got %d", tc.input, len(result)-len(tc.expected))
			}

			// Log success
			t.Logf("Passed %s", tc.name)
		})
	}
}
